# -*- coding: utf-8 -*-
"""VG11 Experiment2 - Adding Layers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EQxpjF72JWbFft7xSjiiKxQvxAuyLjn8
"""

if __name__ == "__main__":
    import torch
    import torch.nn as nn
    import torch.optim as optim
    from torchvision import transforms, datasets
    from torch.utils.data import DataLoader
    from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix


    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")


    class VGG11(nn.Module):
        def __init__(self, kernel_size=3, extra_layer=False):
            super(VGG11, self).__init__()
            self.features = nn.Sequential(
                # b1
                nn.Conv2d(3, 64, kernel_size=kernel_size, stride=1, padding=1),
                nn.BatchNorm2d(64),
                nn.ReLU(),
                nn.MaxPool2d(kernel_size=2, stride=2),
                # B2
                nn.Conv2d(64, 128, kernel_size=kernel_size, stride=1, padding=1),
                nn.BatchNorm2d(128),
                nn.ReLU(),
                nn.MaxPool2d(kernel_size=2, stride=2),
                # B3
                nn.Conv2d(128, 256, kernel_size=kernel_size, stride=1, padding=1),
                nn.BatchNorm2d(256),
                nn.ReLU(),
                nn.Conv2d(256, 256, kernel_size=kernel_size, stride=1, padding=1),
                nn.BatchNorm2d(256),
                nn.ReLU(),
                nn.MaxPool2d(kernel_size=2, stride=2),
                # B4
                nn.Conv2d(256, 512, kernel_size=kernel_size, stride=1, padding=1),
                nn.BatchNorm2d(512),
                nn.ReLU(),
                nn.Conv2d(512, 512, kernel_size=kernel_size, stride=1, padding=1),
                nn.BatchNorm2d(512),
                nn.ReLU(),
                nn.MaxPool2d(kernel_size=2, stride=2),
                # B5
                nn.Conv2d(512, 512, kernel_size=kernel_size, stride=1, padding=1),
                nn.BatchNorm2d(512),
                nn.ReLU(),
            )

            # EXTRA LAYER
            if extra_layer:
                self.features.add_module("ExtraConv", nn.Conv2d(512, 512, kernel_size=kernel_size, stride=1, padding=1))
                self.features.add_module("ExtraBN", nn.BatchNorm2d(512))
                self.features.add_module("ExtraReLU", nn.ReLU())

            self.features.add_module("Block5_MaxPool", nn.MaxPool2d(kernel_size=2, stride=2))

            # input size for classifier
            self._rebuild_classifier()

        def _rebuild_classifier(self):
            # map size after the convolutional layers
            with torch.no_grad():
                dummy_input = torch.zeros(1, 3, 32, 32)  # CIFAR-10 images are 32x32 with 3 channels
                output = self.features(dummy_input)
                self.fc_input_size = output.view(1, -1).size(1)

            # Rebuild because of new size
            self.classifier = nn.Sequential(
                nn.Linear(self.fc_input_size, 4096),
                nn.ReLU(),
                nn.Dropout(0.5),
                nn.Linear(4096, 4096),
                nn.ReLU(),
                nn.Dropout(0.5),
                nn.Linear(4096, 10),
            )

        def forward(self, x):
            x = self.features(x)
            x = x.view(x.size(0), -1)
            x = self.classifier(x)
            return x

    def train_and_evaluate(model, trainloader, testloader, num_epochs=10):
        model.to(device)
        criterion = nn.CrossEntropyLoss()
        optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9)

        print("\nStarting Training...")
        for epoch in range(num_epochs):
            model.train()
            total_loss = 0
            print(f"\nEpoch [{epoch+1}/{num_epochs}] in progress...")
            for batch_idx, (images, labels) in enumerate(trainloader):
                images, labels = images.to(device), labels.to(device)

                # Forward
                outputs = model(images)
                loss = criterion(outputs, labels)
                total_loss += loss.item()

                # Backward
                optimizer.zero_grad()
                loss.backward()
                optimizer.step()

                # sow progress in progrm
                if batch_idx % 100 == 0:
                    print(f"Epoch [{epoch+1}/{num_epochs}], Batch [{batch_idx}/{len(trainloader)}], Loss: {loss.item():.4f}")

            print(f"Epoch [{epoch+1}/{num_epochs}] Completed. Average Loss: {total_loss/len(trainloader):.4f}")

        # See results and print
        print("\nStarting Evaluation...")
        model.eval()
        all_preds, all_labels = [], []
        with torch.no_grad():
            for batch_idx, (images, labels) in enumerate(testloader):
                images, labels = images.to(device), labels.to(device)
                outputs = model(images)
                _, preds = torch.max(outputs, 1)
                all_preds.extend(preds.cpu().numpy())
                all_labels.extend(labels.cpu().numpy())

                # see progress
                if batch_idx % 50 == 0:
                    print(f"Evaluating Batch [{batch_idx}/{len(testloader)}]...")

        accuracy = accuracy_score(all_labels, all_preds)
        precision = precision_score(all_labels, all_preds, average='macro')
        recall = recall_score(all_labels, all_preds, average='macro')
        f1 = f1_score(all_labels, all_preds, average='macro')
        conf_matrix = confusion_matrix(all_labels, all_preds)

        print("\nEvaluation Results:")
        print(f"Accuracy: {accuracy:.2f}")
        print(f"Precision: {precision:.2f}")
        print(f"Recall: {recall:.2f}")
        print(f"F1 Score: {f1:.2f}")
        print("Confusion Matrix:")
        print(conf_matrix)

    #  CIFAR-10
    transform = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
    ])

    # CIFAR-10 dataset in this file call
    trainset = datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
    testset = datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)

    trainloader = DataLoader(trainset, batch_size=64, shuffle=True, num_workers=2)
    testloader = DataLoader(testset, batch_size=64, shuffle=False, num_workers=2)

    # Call
   print("\nExperiment 2: Adding Layers")
  model_with_extra_layer = VGG11(extra_layer=True)
  train_and_evaluate(model_with_extra_layer, trainloader, testloader)